package main

import (
	"docker_example/proto"
	"io/ioutil"
	"log"
	"net"
	"net/http"
	"os"
	"strings"

	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	glog "google.golang.org/grpc/grpclog"
)

var grpcLog glog.LoggerV2

func init() {
	grpcLog = glog.NewLoggerV2(os.Stdout, os.Stdout, os.Stdout)
}

//! Server Some Comment
type Server struct {
}

//! ProccessPlainText Some Comment
func (s *Server) ProccessPlainText(ctx context.Context, msg *proto.Message) (*proto.Message, error) {
	grpcLog.Info("get msg: " + msg.Content)

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go


	var msgout *proto.Message
	msgout = &proto.Message{}
	body := strings.NewReader(msg.Content)
	req, err := http.NewRequest("POST", "https://live.european-language-grid.eu/execution/processText/opennlpgerman", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Authorization", "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ0MVhwNXlCb1VpREM0emxOdTcyeUNwT3hKRG1fQTdObVRkSjZRcVRiQW5nIn0.eyJqdGkiOiIwNWQ3NjBkOC1kMzZkLTQwZDgtYTI2Ni1iYmI1YjdiZDY0YWQiLCJleHAiOjE2MDc5NzQzMzgsIm5iZiI6MCwiaWF0IjoxNjA3OTYzNTM4LCJpc3MiOiJodHRwczovL2xpdmUuZXVyb3BlYW4tbGFuZ3VhZ2UtZ3JpZC5ldS9hdXRoL3JlYWxtcy9FTEciLCJhdWQiOiJlbGdfZ2F0ZWtlZXBlciIsInN1YiI6ImJjM2QzNzMwLThjMzktNDJlYy04NzRkLWM0MDJjZjc0YjA1OCIsInR5cCI6IkJlYXJlciIsImF6cCI6InJlYWN0LWNsaWVudCIsIm5vbmNlIjoiN2ZiM2UyZDMtMDc0Ni00NDg1LThhNWMtYjRmOWU1Yzk5MTUyIiwiYXV0aF90aW1lIjoxNjA3OTYzNTM1LCJzZXNzaW9uX3N0YXRlIjoiYTFjMGRkM2EtNmI3NS00ZTlkLWE2YzUtMjdhMDk1OGUzNzUyIiwiYWNyIjoiMCIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2xpdmUuZXVyb3BlYW4tbGFuZ3VhZ2UtZ3JpZC5ldS8iXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbInByb3ZpZGVyIiwiY29uc3VtZXIiXX0sInJlc291cmNlX2FjY2VzcyI6eyJyZWFjdC1jbGllbnQiOnsicm9sZXMiOlsicHJvdmlkZXIiLCJjb25zdW1lciJdfX0sInNjb3BlIjoib3BlbmlkIEVMRy1wcm9maWxlIHByb2ZpbGUgZW1haWwiLCJ3ZWJzaXRlIjoiIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInJvbGVzIjpbInByb3ZpZGVyIiwiY29uc3VtZXIiLCJwcm92aWRlciIsImNvbnN1bWVyIl0sIm5hbWUiOiJTZXJrYW4gQWxpIEVyZ2VuZSIsInByZWZlcnJlZF91c2VybmFtZSI6InNlcmthbl9hbGkuZXJnZW5lQGRma2kuZGUiLCJnaXZlbl9uYW1lIjoiU2Vya2FuIEFsaSIsImZhbWlseV9uYW1lIjoiRXJnZW5lIiwiZW1haWwiOiJzZXJrYW5fYWxpLmVyZ2VuZUBkZmtpLmRlIn0.Cf2rnG_gYEM3p7qeAt5SRyv8gXNKw0SeierK7sM-Ym_kbQBXXa4IhPJrdKsNZKFisJq5YFdo7WCzZkYRzMlcxCJPJyhbNKdruWyoePA0ZAws-4L46HAgxszluyb0OvZ82DQIflJvTfh3SXYY9ghvxeIONzUNUwrak_H0Eo0PmzRi1732wVzC4smPX77cpQ0NHeJUGVNbnXZNIRXoD_NZtziCoTJalYGHAyZTbtFsqc8YiZnkDxX5-Q2zpcEl0V6BO23bzzf_QCP1ImhC7Ul4OFGcKfN-C9XeuSODPsY8zuuIxfwLqQdwxk10DgUIXzBKON4o2IQb5A5HMjw_Vrr8vg")
	req.Header.Set("Content-Type", "text/plain")

	grpcLog.Info("Request do...")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
		log.Fatal(err)
	}
	grpcLog.Info("Request done Sucess!")
	if resp.StatusCode == http.StatusOK {
		bodyBytes, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatal(err)
		}
		bodyString := string(bodyBytes)
		grpcLog.Info("Response: ", bodyString)
		msgout.Content = bodyString
	}
	grpcLog.Info("Response: ", resp.StatusCode)
	defer resp.Body.Close()

	return msgout, nil
}

func main() {

	server := &Server{}

	grpcServer := grpc.NewServer()
	listener, err := net.Listen("tcp", ":8080")
	if err != nil {
		log.Fatalf("error creating the server %v", err)
	}

	grpcLog.Info("Starting server at port :8080")

	proto.RegisterELGServiceServer(grpcServer, server)
	grpcServer.Serve(listener)
	grpcLog.Info("Wait for Message 2 ")
}
